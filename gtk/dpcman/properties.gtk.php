<?php$__GTK['properties']['properties'] = 'Properties';$__GTKXY['properties']['x'] = 200;$__GTKXY['properties']['y'] = 300;class properties {    var $parray; //protypos array    var $sarray; //set array		var $frame;  //alias page array 		    var $notebook;		var $protypo;		var $targets;		function properties($container) { 		    $this->targets = array(array('text/plain', 0, -1));	 	  	   	    $this->parray = array();	    $this->sarray = array();			    $this->frame = array();						$this->protypo = paramload('PROTYPO','DPC');				$this->parray = $this->read_protypo(); 	   	    $this->properties_control($container); 				 		}		function properties_control(&$container) {			  		  	        $basebox = &new GtkVBox();		$container->add($basebox);					$this->notebook = new GtkNotebook;		$this->notebook->show();		$this->notebook->connect('switch_page', array($this,'page_switch'));		$this->notebook->set_tab_pos(GTK_POS_TOP);		$basebox->pack_start($this->notebook, true, true, 0);		$this->notebook->set_border_width(1);		$this->notebook->set_scrollable(true); 	    $this->notebook->set_show_tabs(false);				$this->notebook->realize();						$this->create_prop_pages();									$this->show();			}				function show($alias='') {	    global $T_project;		        if (($alias) && ($T_project)) {	      $p = $this->frame[$alias];          if ($p) $this->notebook->set_page($p);		      		     else $this->notebook->set_page(0);		  	      $this->set_properties($alias);		  		 		}		else {		  $this->notebook->set_page(0);  		}  	}			//start properties	function start() {	    global $shell;				$prtitle = $shell->get_project_title(); //print">>>>>>>>$prtitle";				$this->startup('ID',"$prtitle.prj,/projects/$prtitle/");   		$this->startup('HTML');		$this->startup('SHELL',"0.1,http://,https://,/webos/projects/$prtitle/public,action.func,$prtitle,/webos/projects/$prtitle/,/themes/styles.css,/webos/projects/$prtitle/sessions,default,WINDOWS,0,0,/webos/projects/$prtitle/cache,100");		}		//drug from module schema	function dnd_properties_received($widget, $context, $x, $y, $data, $info, $time) {	    global $shell;			if ($data && $data->format == 8) {				    $module = $data->data; 					//$this->show($module);	//errors				$shell->event_queue('properties',$module);	    }			}			    function create_prop_pages() {           //blank			   $child = &new GtkFrame("");		   		   //drug & drop feature 	       $child->connect('drag_data_received', array($this,'dnd_properties_received'));	       $child->drag_dest_set(GTK_DEST_DEFAULT_ALL, $this->targets, GDK_ACTION_COPY);			   		   		   $child->show_all();		   			 		   $label_box = &new GtkHBox(false, 0);					   $label = &new GtkLabel("");		   $label_box->pack_start($label, false, true, 0);		   $label_box->show_all();					   $menu_box = &new GtkHBox(false, 0);			   $label = &new GtkLabel("");		   $menu_box->pack_start($label, false, true, 0);			 				   $this->notebook->append_page_menu($child, $label_box, $menu_box);		   		   //save pagenum					   $this->frame['NULL'] = 0;			   			       //array	       reset($this->parray); 		   //print_r($this->parray);		   		   $i=1;	       foreach ($this->parray as $dpc=>$data) {					  		     $child = &new GtkFrame($dpc);		     $child->set_border_width(1);			 		     //drug & drop feature			  	         $child->connect('drag_data_received', array($this,'dnd_properties_received'));	         $child->drag_dest_set(GTK_DEST_DEFAULT_ALL, $this->targets, GDK_ACTION_COPY);			 			 $this->get_properties($child,$dpc);			 		     $child->show_all();			 			 		     $label_box = &new GtkHBox(false, 0);					     $label = &new GtkLabel("$dpc");		     $label_box->pack_start($label, false, true, 0);		     $label_box->show_all();					     $menu_box = &new GtkHBox(false, 0);			     $label = &new GtkLabel("$dpc");		     $menu_box->pack_start($label, false, true, 0);		     $menu_box->show_all();			 				     $this->notebook->append_page_menu($child, $label_box, $menu_box);			 //save pagenum						 $this->frame[$dpc] = $i++;			 	       }		   		   //print_r($this->frame);			}			function destroy_prop_pages() {		/*      $i=0;		  //print_r($this->frame);		  		  $max = count($this->frame);		  		  for ($i=$max;$i>=0;$i--) {   	          $this->notebook->remove_page($i);   			  //echo $i,"\n";		  }	 */	      $this->notebook->set_page(0); 	}				//get the prototype properties as input array	function get_properties($container,$dpcmod) {	        $box = &new GtkVBox();		$container->add($box);						$scroll_win = &new GtkScrolledWindow();		//$scroll_win->set_border_width(0);		$scroll_win->set_policy(GTK_POLICY_AUTOMATIC, GTK_POLICY_ALWAYS);		$box->pack_start($scroll_win);			    $vmbox = &new GtkVBox();	    //$vmbox->set_border_width(0);	    $scroll_win->add_with_viewport($vmbox);						    reset($this->parray);		$i=0;	    foreach ($this->parray[$dpcmod] as $rec=>$val) {	      $hbox = &new GtkHBox();	      $hbox->set_border_width(0);	      $vmbox->pack_start($hbox, false,false,0);							  $this->label{$dpcmod}{$i} = &new GtkLabel($rec);          $this->label{$dpcmod}{$i}->set_justify(GTK_JUSTIFY_LEFT);		  		  		  $hbox->pack_start($this->label{$dpcmod}{$i},false);//,false,false,0);		  		  $this->field{$dpcmod}{$i} = &new GtkEntry();		  $this->field{$dpcmod}{$i}->set_text($val);		  $this->field{$dpcmod}{$i}->set_max_length(64);	          //$this->field{$dpcmod}{$i}->set_justify(GTK_JUSTIFY_RIGHT);		  	  		  $this->field{$dpcmod}{$i}->connect_object('changed', array($this,'properties_changed'));		  		  $hbox->pack_start($this->field{$dpcmod}{$i});//,false,false,0);			  		  		  $i+=1;		}	}		//add the current properties to output array  	function set_properties($dpcmod) {		    if ($dpcmod) {				  if (is_array($this->parray)) {	        reset($this->parray);		    $i=0;	        foreach ($this->parray[$dpcmod] as $rec=>$val) {		  		  		      $subarray[$this->label{$dpcmod}{$i}->get()] = $this->field{$dpcmod}{$i}->get_text();		      $i+=1;		    }		  }					      $this->sarray[$dpcmod] = $subarray; //(0=>a,1=>b);	      //print_r($this->sarray);				}  	}		function update_properties($dpcmod) {		    if ($dpcmod) {		  $i=0;	      foreach ($this->parray[$dpcmod] as $rec=>$val) {		  		  		    $this->sarray[$dpcmod][$rec] = $this->field{$dpcmod}{$i}->get_text();		    $i+=1;		  }		  //print_r($this->sarray);				}  	}		//use this for auto set array properties	function startup($dpcmod,$values="") {	   if ($dpcmod) {	     $this->set_properties($dpcmod);		 		 if ($values) {		   $vals = explode(",",$values);		   //print_r ($vals);		   		   $i=0;	       foreach ($vals as $rec=>$val) {		  		  		     //$this->sarray[$dpcmod][$rec] = $val; 			 $this->field{$dpcmod}{$i}->set_text($val);		     $i+=1;		   }		   		 }		 else {		   //read protypo		   $i=0;	       foreach ($this->parray[$dpcmod] as $rec=>$val) {		  		  		     $this->field{$dpcmod}{$i}->set_text($this->sarray[$dpcmod][$rec]);		     $i+=1;		   }		   		 }	   } 	}					//clear properties  	function new_() {		 		    //unset sarray		unset($this->sarray);	    $this->sarray = null;			    reset($this->parray);		//print_r($this->parray);	    foreach ($this->parray as $dpc=>$dpcprop) {		  		  $i=0;			      foreach ($dpcprop as $rec=>$val) {					  		  		    $this->field{$dpc}{$i}->set_text($this->parray[$dpc][$rec]); //print ">".$this->parray[$dpc][$rec];		    $i+=1;		  } 		}						$this->start();					$this->show();					}			function load($prjpath) {	    global $shell;		    $inifile = $prjpath . "config.ini";	   		$loaded = parse_ini_file($inifile,1);		//print_r($loaded);						if (is_array($loaded)) {	      foreach ($loaded as $dpc=>$dpcprop) {		  		    $i=0;	        foreach ($dpcprop as $rec=>$val) {				  		      $this->parray[$dpc][$rec] = $val; //update array		      $this->field{$dpc}{$i}->set_text($val);//update text fields			  			  $i+=1;		    }			  }          $shell->set_console_message("Properties loaded.");		  		}		else		  $shell->set_console_message("Properties NOT loaded !!!");		    					$this->start();							    $this->show();	}		function save($prjpath) {	    global $shell;		    		//update all properties		reset($this->sarray);			    foreach ($this->sarray as $dpc=>$dpcprop) 		  $this->update_properties($dpc);							//export array to text				reset($this->sarray);			    foreach ($this->sarray as $dpc=>$dpcprop) {				  				      $out .= "[" . $dpc . "]\n";			      foreach ($dpcprop as $rec=>$val) {				  			$out .= $rec . "=" . $val ."\n"; 		  }			  $out .= "\n\n\n";		  		}				    //save file	    $file = $prjpath . "\public\config.ini";	        if ($fp = fopen ($file , "w")) {                   fwrite ($fp, $out);                   fclose ($fp);				   		           $shell->set_console_message("Properties file saved.");				   				   return (true);	    }	    else {		           $shell->set_console_message("Properties NOT saved !!!");						   return (false);		}						}		function read_protypo() {	    		$ret = parse_ini_file($this->protypo,1);//"./gtk/dpcman/protypo.ini",1);	    //print_r($ret);				return ($ret);	}			function translate($dpc) {		    $item = explode("/",$dpc);        $ret = str_replace(".dpc.php","",$item[2]);				//print strtoupper($ret);		return(strtoupper($ret));	} 		function page_switch() {				} 		function properties_changed() {	}								function menu($container,$menu_on=0) {	   global $shell;	   	   if ($menu_on) {		     $header = &new GtkMenuItem("Properties");	     $propmenu = &new GtkMenu();		 	   		     $id = &new GtkMenuItem("Identity");	     $id->connect_object("activate", array($this, "show"),"ID");	   	     $propmenu->append($id);	      	     $shell = &new GtkMenuItem("Shell");	     $shell->connect_object("activate", array($this, "show"),"SHELL");	     $propmenu->append($shell);	   	   	     $html = &new GtkMenuItem("Html");	     $html->connect_object("activate", array($this, "show"),"HTML");	   	     $propmenu->append($html);	   	   	     $header->set_submenu($propmenu);	   	     $container->append($header);	      	   } 	   	}		function free() {		      $this->destroy_prop_pages();	}	}			?>